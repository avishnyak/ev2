// Structs are reference types that can contain data.
struct Point
{
    var x = 0
    var y: int
}

// Structs can have functions "attached" to them. With this notation, it is
// straight forward to be able to "augment" a struct with functions in multiple
// files.
function Point.double()
{
    print("Point.double")
}

struct Line
{
    var start: Point
    var end: Point
}

function main()
{
    print("Declare Structs")
    // Using the default constructor
    var p1: Point = Point()

    // Using an auto-generated constructor
    var p2: Point = Point(1, 1)

    print("Access struct members")
    print("p1.x: " + string(p1.x))
    print("p1.y: " + string(p1.y))

    print("p2.x: " + string(p2.x))
    print("p2.y: " + string(p2.y))

    print("Nested structs")
    var nested = Line(Point(10, 10), Point(5, 5))
    print("nested.start.x: " + string(nested.start.x))
    print("nested.start.y: " + string(nested.start.y))

    // Assign nested struct to local variable
    var end = nested.end
    print("nested.end.x: " + string(end.x))
    print("nested.end.y: " + string(end.y))

    print("Assign struct members")
    // Assign to struct members
    p1.x = 10
    p1.y = 10
    print("p1.x: " + string(p1.x))
    print("p1.y: " + string(p1.y))

    // Assignment + Operator for struct members
    p1.x += 1
    p1.y -= 1
    print("p1.x: " + string(p1.x))
    print("p1.y: " + string(p1.y))
}